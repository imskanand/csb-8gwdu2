{"version":3,"sources":["src/algorithms/search/linearSearch.ts","src/algorithms/search/binarySearch.ts","src/algorithms/search/twoCrystalBalls.ts","src/index.ts"],"names":[],"mappings":";;;AAAA,aAAA,SAAwB,EAAa,EAAe,GAClD,IAAK,IAAI,EAAI,EAAG,EAAI,EAAI,SAAU,EAChC,GAAI,EAAI,KAAO,EACb,OAAO,EAGX,OAAO,EANT,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA;;ACAA,aAAA,SAAwB,EAAa,EAAe,GAClD,IAAI,EAAc,EACd,EAAe,EAAI,OAEvB,EAAG,CACD,IAAI,EAAc,KAAK,OAAO,EAAM,GAAQ,GAC5C,GAAI,EAAI,KAAS,EAEf,OADA,QAAQ,IAAI,gBAAA,OAAgB,KACrB,EACE,EAAI,GAAO,EACpB,EAAO,EAEP,EAAM,EAAM,QAEP,EAAM,GAEf,OAAO,EAhBT,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA;;ACAA,aAAA,SAAwB,EAAgB,GAItC,IAHA,IAAI,EAAY,KAAK,MAAM,KAAK,KAAK,EAAI,SAErC,EAAI,EACD,EAAI,EAAI,SACT,EAAI,GADa,GAAK,GAM5B,GAAK,EACL,IAAK,IAAI,EAAI,EAAG,EAAI,GAAa,EAAI,EAAI,SAAU,IAAK,EACtD,GAAI,EAAI,GACN,OAAO,EAIX,OAAQ,EAjBV,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA;;ACmCA,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAnCA,QAAA,eAEA,IAAA,EAAA,EAAA,QAAA,qCACA,EAAA,EAAA,QAAA,qCACA,EAAA,EAAA,QAAA,wCAEM,EAAgB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,IACpC,EAAc,EAEhB,GAAkB,EAAA,EAAA,SAAa,EAAK,GACxC,GAAS,EAAA,EAAA,SAAa,EAAK,GAmB3B,IAfA,IAAM,EAAoB,EACxB,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GAGE,EAAM,KAAK,MAAsB,IAAhB,KAAK,UACpB,EAAO,IAAI,MAAM,KAAO,MAAK,GAE1B,EAAI,EAAK,EAAI,MAAS,EAC7B,EAAK,IAAK,EAGZ,IAAI,GAAmB,EAAA,EAAA,SAAgB,GACvC,GAAW,EAAA,EAAA,SAAgB,IAAI,MAAM,KAAK,MAAK","file":"src.04382255.js","sourceRoot":"..","sourcesContent":["export default function linearSearch(arr: number[], key: number): boolean {\n  for (let i = 0; i < arr.length; ++i) {\n    if (arr[i] === key) {\n      return true;\n    }\n  }\n  return false;\n}\n","export default function binarySearch(arr: number[], key: number): boolean {\n  let low: number = 0;\n  let high: number = arr.length;\n\n  do {\n    let mid: number = Math.floor((low + high) / 2);\n    if (arr[mid] === key) {\n      console.log(`The Index is ${mid}`);\n      return true;\n    } else if (arr[mid] > key) {\n      high = mid;\n    } else {\n      low = mid + 1;\n    }\n  } while (low < high);\n\n  return false;\n}\n","export default function twoCrystalBalls(arr: boolean[]): number {\n  let jmpAmount = Math.floor(Math.sqrt(arr.length));\n\n  let i = jmpAmount;\n  for (; i < arr.length; i += jmpAmount) {\n    if (arr[i]) {\n      break;\n    }\n  }\n\n  i -= jmpAmount;\n  for (let j = 0; j < jmpAmount && i < arr.length; ++j, ++i) {\n    if (arr[j]) {\n      return j;\n    }\n  }\n\n  return -1;\n}\n","import \"./style.css\";\n\nimport linearSearch from \"./algorithms/search/linearSearch\";\nimport binarySearch from \"./algorithms/search/binarySearch\";\nimport twoCrystalBalls from \"./algorithms/search/twoCrystalBalls\";\n\nconst arr: number[] = [1, 3, 4, 6, 8, 11, 45];\nconst key: number = 8;\n\nlet result: boolean = linearSearch(arr, key);\nresult = binarySearch(arr, key);\n\n// console.log(result ? \"Element Found\" : \"Element Not Found\");\n\nconst breaks: boolean[] = [\n  false,\n  false,\n  false,\n  false,\n  true,\n  true,\n  false,\n  false,\n  false\n];\n\nlet idx = Math.floor(Math.random() * 10000);\nconst data = new Array(10000).fill(false);\n\nfor (let i = idx; i < 10000; ++i) {\n  data[i] = true;\n}\n\nlet twoBalls: number = twoCrystalBalls(data); // doesn't work\ntwoBalls = twoCrystalBalls(new Array(821).fill(false));\n// console.log(twoBalls, -1);\n"]}